---
- name: setup basic Delphi-BFT dependencies
  hosts: opennebula
  tasks:
    - name: Installing Node, NVM and NPM
      block:
        - name: CURL nvm
          shell: >
           curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
          args:
            creates: "$HOME/.nvm/nvm.sh"
            chdir: $HOME
            executable: /bin/bash
        - name: Install Node
          shell: >
            source $HOME/.nvm/nvm.sh && nvm install "{{node_version}}" && nvm use "{{node_version}}"
          args:
            chdir: $HOME
            executable: /bin/bash
    - name: Installing Phantom
      block:
        - name: Installing Phantom dependencies
          apt:
            pkg:
              - cmake 
              - findutils 
              - libc-dbg 
              - libglib2.0-0 
              - libglib2.0-dev 
              - make 
              - python3 
              - python3-pip 
              - xz-utils 
              - util-linux 
              - gcc 
              - g++
              - python3-numpy 
              - python3-lxml 
              - python3-matplotlib 
              - python3-networkx 
              - python3-scipy 
              - python3-yaml
              - dstat 
              - git 
              - htop 
              - tmux
            state: latest
          become: yes
          become_user: root
        - name: check if cargo is installed
          shell: command -v cargo
          register: cargo_exists
          ignore_errors: yes
          args:
            executable: /bin/bash
        - name: Download Installer
          when: cargo_exists is failed
          get_url:
            url: https://sh.rustup.rs
            dest: /tmp/sh.rustup.rs
            mode: '0755'
            force: 'yes'
          tags:
            - rust
        - name: Install Rust/Cargo
          when: cargo_exists is failed
          shell: /tmp/sh.rustup.rs -y
          tags:
            - rust
          args:
            executable: /bin/bash
        - name: Cloning the Phantom repository and checking out tag v2.2.0
          git:
            repo: "{{ phantom_repo }}"
            dest: "{{ phantom_clone_dir }}"
            version: tags/"{{ phantom_version }}"
        - name: Building Phantom
          shell: >
            source $HOME/.cargo/env && ./setup build --clean --test
          args:
            chdir: "{{ phantom_clone_dir }}"
            executable: /bin/bash
          register: build
        - debug: msg="{{ build.stdout}}"
        - debug: msg="{{ build.stderr}}"
        - name: Running Phantom tests
          shell: >
            source $HOME/.cargo/env && ./setup test
          args:
            chdir: "{{phantom_clone_dir}}"
            executable: /bin/bash
          register: testing
        - debug: msg="{{ testing.stdout}}"
        - debug: msg="{{ testing.stderr}}"
        - name: Installing Phantom
          shell: >
            source $HOME/.cargo/env &&  ./setup install
          args:
            chdir: "{{ phantom_clone_dir }}"
            executable: /bin/bash
          register: installation
        - debug: msg="{{ installation.stdout}}"
        - debug: msg="{{ installation.stderr}}"
        - name: Adding Phantom to PATH
          lineinfile: 
            line: export PATH="${PATH}:$HOME/.local/bin" 
            path: $HOME/.bashrc 

    - name: Installing HotStuff dependencies
      apt:
        pkg:
          - libssl-dev 
          - libuv1-dev 
          - libtool 
          - dh-autoreconf
          - libtool 
          - autoconf
        state: latest
      become: yes
      become_user: root
    - name: Installing BFT-SMaRt dependencies
      apt:
        pkg:
          - openjdk-11-jre-headless
        state: latest
      become: yes
      become_user: root
    - name: Cloning Delphi-BFT
      git:
        repo: "{{ delphi_bft_repo }}"
        dest: "{{ delphi_bft_clone_dir }}"
        version: main
    - name: Running npm install
      shell: source $HOME/.nvm/nvm.sh && npm install
      args:
        chdir: "{{ delphi_bft_clone_dir }}"
        executable: /bin/bash
      

